// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"
	"time"

	"github.com/Ingenieria-de-Software-2-Gupo-14/user-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBlockedUserRepository creates a new instance of MockBlockedUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockedUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockedUserRepository {
	mock := &MockBlockedUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlockedUserRepository is an autogenerated mock type for the BlockedUserRepository type
type MockBlockedUserRepository struct {
	mock.Mock
}

type MockBlockedUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockedUserRepository) EXPECT() *MockBlockedUserRepository_Expecter {
	return &MockBlockedUserRepository_Expecter{mock: &_m.Mock}
}

// BlockUser provides a mock function for the type MockBlockedUserRepository
func (_mock *MockBlockedUserRepository) BlockUser(ctx context.Context, blockedUserID int, reason string, blockerID *int, blockedUntil *time.Time) error {
	ret := _mock.Called(ctx, blockedUserID, reason, blockerID, blockedUntil)

	if len(ret) == 0 {
		panic("no return value specified for BlockUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, *int, *time.Time) error); ok {
		r0 = returnFunc(ctx, blockedUserID, reason, blockerID, blockedUntil)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockedUserRepository_BlockUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUser'
type MockBlockedUserRepository_BlockUser_Call struct {
	*mock.Call
}

// BlockUser is a helper method to define mock.On call
//   - ctx
//   - blockedUserID
//   - reason
//   - blockerID
//   - blockedUntil
func (_e *MockBlockedUserRepository_Expecter) BlockUser(ctx interface{}, blockedUserID interface{}, reason interface{}, blockerID interface{}, blockedUntil interface{}) *MockBlockedUserRepository_BlockUser_Call {
	return &MockBlockedUserRepository_BlockUser_Call{Call: _e.mock.On("BlockUser", ctx, blockedUserID, reason, blockerID, blockedUntil)}
}

func (_c *MockBlockedUserRepository_BlockUser_Call) Run(run func(ctx context.Context, blockedUserID int, reason string, blockerID *int, blockedUntil *time.Time)) *MockBlockedUserRepository_BlockUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*int), args[4].(*time.Time))
	})
	return _c
}

func (_c *MockBlockedUserRepository_BlockUser_Call) Return(err error) *MockBlockedUserRepository_BlockUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockedUserRepository_BlockUser_Call) RunAndReturn(run func(ctx context.Context, blockedUserID int, reason string, blockerID *int, blockedUntil *time.Time) error) *MockBlockedUserRepository_BlockUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksByUserId provides a mock function for the type MockBlockedUserRepository
func (_mock *MockBlockedUserRepository) GetBlocksByUserId(ctx context.Context, userID int) ([]models.BlockedUser, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksByUserId")
	}

	var r0 []models.BlockedUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.BlockedUser, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.BlockedUser); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BlockedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBlockedUserRepository_GetBlocksByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksByUserId'
type MockBlockedUserRepository_GetBlocksByUserId_Call struct {
	*mock.Call
}

// GetBlocksByUserId is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockBlockedUserRepository_Expecter) GetBlocksByUserId(ctx interface{}, userID interface{}) *MockBlockedUserRepository_GetBlocksByUserId_Call {
	return &MockBlockedUserRepository_GetBlocksByUserId_Call{Call: _e.mock.On("GetBlocksByUserId", ctx, userID)}
}

func (_c *MockBlockedUserRepository_GetBlocksByUserId_Call) Run(run func(ctx context.Context, userID int)) *MockBlockedUserRepository_GetBlocksByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlockedUserRepository_GetBlocksByUserId_Call) Return(blockedUsers []models.BlockedUser, err error) *MockBlockedUserRepository_GetBlocksByUserId_Call {
	_c.Call.Return(blockedUsers, err)
	return _c
}

func (_c *MockBlockedUserRepository_GetBlocksByUserId_Call) RunAndReturn(run func(ctx context.Context, userID int) ([]models.BlockedUser, error)) *MockBlockedUserRepository_GetBlocksByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// UnblockUser provides a mock function for the type MockBlockedUserRepository
func (_mock *MockBlockedUserRepository) UnblockUser(ctx context.Context, blockedUserID int) error {
	ret := _mock.Called(ctx, blockedUserID)

	if len(ret) == 0 {
		panic("no return value specified for UnblockUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, blockedUserID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBlockedUserRepository_UnblockUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnblockUser'
type MockBlockedUserRepository_UnblockUser_Call struct {
	*mock.Call
}

// UnblockUser is a helper method to define mock.On call
//   - ctx
//   - blockedUserID
func (_e *MockBlockedUserRepository_Expecter) UnblockUser(ctx interface{}, blockedUserID interface{}) *MockBlockedUserRepository_UnblockUser_Call {
	return &MockBlockedUserRepository_UnblockUser_Call{Call: _e.mock.On("UnblockUser", ctx, blockedUserID)}
}

func (_c *MockBlockedUserRepository_UnblockUser_Call) Run(run func(ctx context.Context, blockedUserID int)) *MockBlockedUserRepository_UnblockUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlockedUserRepository_UnblockUser_Call) Return(err error) *MockBlockedUserRepository_UnblockUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBlockedUserRepository_UnblockUser_Call) RunAndReturn(run func(ctx context.Context, blockedUserID int) error) *MockBlockedUserRepository_UnblockUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginAttemptRepository creates a new instance of MockLoginAttemptRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAttemptRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAttemptRepository {
	mock := &MockLoginAttemptRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginAttemptRepository is an autogenerated mock type for the LoginAttemptRepository type
type MockLoginAttemptRepository struct {
	mock.Mock
}

type MockLoginAttemptRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAttemptRepository) EXPECT() *MockLoginAttemptRepository_Expecter {
	return &MockLoginAttemptRepository_Expecter{mock: &_m.Mock}
}

// AddLoginAttempt provides a mock function for the type MockLoginAttemptRepository
func (_mock *MockLoginAttemptRepository) AddLoginAttempt(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error {
	ret := _mock.Called(ctx, userID, ipAddress, userAgent, successful)

	if len(ret) == 0 {
		panic("no return value specified for AddLoginAttempt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, string, bool) error); ok {
		r0 = returnFunc(ctx, userID, ipAddress, userAgent, successful)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoginAttemptRepository_AddLoginAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLoginAttempt'
type MockLoginAttemptRepository_AddLoginAttempt_Call struct {
	*mock.Call
}

// AddLoginAttempt is a helper method to define mock.On call
//   - ctx
//   - userID
//   - ipAddress
//   - userAgent
//   - successful
func (_e *MockLoginAttemptRepository_Expecter) AddLoginAttempt(ctx interface{}, userID interface{}, ipAddress interface{}, userAgent interface{}, successful interface{}) *MockLoginAttemptRepository_AddLoginAttempt_Call {
	return &MockLoginAttemptRepository_AddLoginAttempt_Call{Call: _e.mock.On("AddLoginAttempt", ctx, userID, ipAddress, userAgent, successful)}
}

func (_c *MockLoginAttemptRepository_AddLoginAttempt_Call) Run(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool)) *MockLoginAttemptRepository_AddLoginAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockLoginAttemptRepository_AddLoginAttempt_Call) Return(err error) *MockLoginAttemptRepository_AddLoginAttempt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoginAttemptRepository_AddLoginAttempt_Call) RunAndReturn(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error) *MockLoginAttemptRepository_AddLoginAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// BadLoginAttemptsInLast10Minutes provides a mock function for the type MockLoginAttemptRepository
func (_mock *MockLoginAttemptRepository) BadLoginAttemptsInLast10Minutes(ctx context.Context, userID int) (int, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for BadLoginAttemptsInLast10Minutes")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BadLoginAttemptsInLast10Minutes'
type MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call struct {
	*mock.Call
}

// BadLoginAttemptsInLast10Minutes is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockLoginAttemptRepository_Expecter) BadLoginAttemptsInLast10Minutes(ctx interface{}, userID interface{}) *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call {
	return &MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call{Call: _e.mock.On("BadLoginAttemptsInLast10Minutes", ctx, userID)}
}

func (_c *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call) Run(run func(ctx context.Context, userID int)) *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call) Return(n int, err error) *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call) RunAndReturn(run func(ctx context.Context, userID int) (int, error)) *MockLoginAttemptRepository_BadLoginAttemptsInLast10Minutes_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginsByUserId provides a mock function for the type MockLoginAttemptRepository
func (_mock *MockLoginAttemptRepository) GetLoginsByUserId(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetLoginsByUserId")
	}

	var r0 []*models.LoginAttempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*models.LoginAttempt, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) []*models.LoginAttempt); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LoginAttempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAttemptRepository_GetLoginsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginsByUserId'
type MockLoginAttemptRepository_GetLoginsByUserId_Call struct {
	*mock.Call
}

// GetLoginsByUserId is a helper method to define mock.On call
//   - ctx
//   - userID
//   - limit
//   - offset
func (_e *MockLoginAttemptRepository_Expecter) GetLoginsByUserId(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockLoginAttemptRepository_GetLoginsByUserId_Call {
	return &MockLoginAttemptRepository_GetLoginsByUserId_Call{Call: _e.mock.On("GetLoginsByUserId", ctx, userID, limit, offset)}
}

func (_c *MockLoginAttemptRepository_GetLoginsByUserId_Call) Run(run func(ctx context.Context, userID int, limit int, offset int)) *MockLoginAttemptRepository_GetLoginsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockLoginAttemptRepository_GetLoginsByUserId_Call) Return(loginAttempts []*models.LoginAttempt, err error) *MockLoginAttemptRepository_GetLoginsByUserId_Call {
	_c.Call.Return(loginAttempts, err)
	return _c
}

func (_c *MockLoginAttemptRepository_GetLoginsByUserId_Call) RunAndReturn(run func(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error)) *MockLoginAttemptRepository_GetLoginsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) AddUser(ctx context.Context, user *models.User) (int, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User) (int, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User) int); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type MockUserRepository_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) AddUser(ctx interface{}, user interface{}) *MockUserRepository_AddUser_Call {
	return &MockUserRepository_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *MockUserRepository_AddUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockUserRepository_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_AddUser_Call) Return(n int, err error) *MockUserRepository_AddUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserRepository_AddUser_Call) RunAndReturn(run func(ctx context.Context, user *models.User) (int, error)) *MockUserRepository_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteUser(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserRepository_DeleteUser_Call {
	return &MockUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserRepository_DeleteUser_Call) Run(run func(ctx context.Context, id int)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) Return(err error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserRepository_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx
func (_e *MockUserRepository_Expecter) GetAllUsers(ctx interface{}) *MockUserRepository_GetAllUsers_Call {
	return &MockUserRepository_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockUserRepository_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserRepository_GetAllUsers_Call) Return(users []models.User, err error) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context) ([]models.User, error)) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUser(ctx context.Context, id int) (*models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) GetUser(ctx interface{}, id interface{}) *MockUserRepository_GetUser_Call {
	return &MockUserRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUserRepository_GetUser_Call) Run(run func(ctx context.Context, id int)) *MockUserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserRepository_GetUser_Call) Return(user *models.User, err error) *MockUserRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUser_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.User, error)) *MockUserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetUserByEmail_Call {
	return &MockUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) Return(user *models.User, err error) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*models.User, error)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyLocation provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ModifyLocation(ctx context.Context, id int, newLocation string) error {
	ret := _mock.Called(ctx, id, newLocation)

	if len(ret) == 0 {
		panic("no return value specified for ModifyLocation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, id, newLocation)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_ModifyLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyLocation'
type MockUserRepository_ModifyLocation_Call struct {
	*mock.Call
}

// ModifyLocation is a helper method to define mock.On call
//   - ctx
//   - id
//   - newLocation
func (_e *MockUserRepository_Expecter) ModifyLocation(ctx interface{}, id interface{}, newLocation interface{}) *MockUserRepository_ModifyLocation_Call {
	return &MockUserRepository_ModifyLocation_Call{Call: _e.mock.On("ModifyLocation", ctx, id, newLocation)}
}

func (_c *MockUserRepository_ModifyLocation_Call) Run(run func(ctx context.Context, id int, newLocation string)) *MockUserRepository_ModifyLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_ModifyLocation_Call) Return(err error) *MockUserRepository_ModifyLocation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_ModifyLocation_Call) RunAndReturn(run func(ctx context.Context, id int, newLocation string) error) *MockUserRepository_ModifyLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ModifyUser(ctx context.Context, user *models.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ModifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_ModifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyUser'
type MockUserRepository_ModifyUser_Call struct {
	*mock.Call
}

// ModifyUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) ModifyUser(ctx interface{}, user interface{}) *MockUserRepository_ModifyUser_Call {
	return &MockUserRepository_ModifyUser_Call{Call: _e.mock.On("ModifyUser", ctx, user)}
}

func (_c *MockUserRepository_ModifyUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockUserRepository_ModifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_ModifyUser_Call) Return(err error) *MockUserRepository_ModifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_ModifyUser_Call) RunAndReturn(run func(ctx context.Context, user *models.User) error) *MockUserRepository_ModifyUser_Call {
	_c.Call.Return(run)
	return _c
}
