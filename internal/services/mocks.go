// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"
	"time"

	"github.com/Ingenieria-de-Software-2-Gupo-14/user-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLoginAttemptService creates a new instance of MockLoginAttemptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAttemptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAttemptService {
	mock := &MockLoginAttemptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginAttemptService is an autogenerated mock type for the LoginAttemptService type
type MockLoginAttemptService struct {
	mock.Mock
}

type MockLoginAttemptService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAttemptService) EXPECT() *MockLoginAttemptService_Expecter {
	return &MockLoginAttemptService_Expecter{mock: &_m.Mock}
}

// AddLoginAttempt provides a mock function for the type MockLoginAttemptService
func (_mock *MockLoginAttemptService) AddLoginAttempt(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error {
	ret := _mock.Called(ctx, userID, ipAddress, userAgent, successful)

	if len(ret) == 0 {
		panic("no return value specified for AddLoginAttempt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, string, bool) error); ok {
		r0 = returnFunc(ctx, userID, ipAddress, userAgent, successful)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoginAttemptService_AddLoginAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLoginAttempt'
type MockLoginAttemptService_AddLoginAttempt_Call struct {
	*mock.Call
}

// AddLoginAttempt is a helper method to define mock.On call
//   - ctx
//   - userID
//   - ipAddress
//   - userAgent
//   - successful
func (_e *MockLoginAttemptService_Expecter) AddLoginAttempt(ctx interface{}, userID interface{}, ipAddress interface{}, userAgent interface{}, successful interface{}) *MockLoginAttemptService_AddLoginAttempt_Call {
	return &MockLoginAttemptService_AddLoginAttempt_Call{Call: _e.mock.On("AddLoginAttempt", ctx, userID, ipAddress, userAgent, successful)}
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) Run(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool)) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) Return(err error) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) RunAndReturn(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginsByUserId provides a mock function for the type MockLoginAttemptService
func (_mock *MockLoginAttemptService) GetLoginsByUserId(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetLoginsByUserId")
	}

	var r0 []*models.LoginAttempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*models.LoginAttempt, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) []*models.LoginAttempt); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LoginAttempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAttemptService_GetLoginsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginsByUserId'
type MockLoginAttemptService_GetLoginsByUserId_Call struct {
	*mock.Call
}

// GetLoginsByUserId is a helper method to define mock.On call
//   - ctx
//   - userID
//   - limit
//   - offset
func (_e *MockLoginAttemptService_Expecter) GetLoginsByUserId(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockLoginAttemptService_GetLoginsByUserId_Call {
	return &MockLoginAttemptService_GetLoginsByUserId_Call{Call: _e.mock.On("GetLoginsByUserId", ctx, userID, limit, offset)}
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) Run(run func(ctx context.Context, userID int, limit int, offset int)) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) Return(loginAttempts []*models.LoginAttempt, err error) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Return(loginAttempts, err)
	return _c
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) RunAndReturn(run func(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error)) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// BlockUser provides a mock function for the type MockUserService
func (_mock *MockUserService) BlockUser(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time) error {
	ret := _mock.Called(ctx, id, reason, blockerId, blockedUntil)

	if len(ret) == 0 {
		panic("no return value specified for BlockUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, *int, *time.Time) error); ok {
		r0 = returnFunc(ctx, id, reason, blockerId, blockedUntil)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_BlockUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUser'
type MockUserService_BlockUser_Call struct {
	*mock.Call
}

// BlockUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - reason
//   - blockerId
//   - blockedUntil
func (_e *MockUserService_Expecter) BlockUser(ctx interface{}, id interface{}, reason interface{}, blockerId interface{}, blockedUntil interface{}) *MockUserService_BlockUser_Call {
	return &MockUserService_BlockUser_Call{Call: _e.mock.On("BlockUser", ctx, id, reason, blockerId, blockedUntil)}
}

func (_c *MockUserService_BlockUser_Call) Run(run func(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time)) *MockUserService_BlockUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*int), args[4].(*time.Time))
	})
	return _c
}

func (_c *MockUserService_BlockUser_Call) Return(err error) *MockUserService_BlockUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_BlockUser_Call) RunAndReturn(run func(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time) error) *MockUserService_BlockUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(ctx context.Context, request models.CreateUserRequest, admin bool) (int, error) {
	ret := _mock.Called(ctx, request, admin)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateUserRequest, bool) (int, error)); ok {
		return returnFunc(ctx, request, admin)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateUserRequest, bool) int); ok {
		r0 = returnFunc(ctx, request, admin)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.CreateUserRequest, bool) error); ok {
		r1 = returnFunc(ctx, request, admin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - request
//   - admin
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, request interface{}, admin interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, request, admin)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, request models.CreateUserRequest, admin bool)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateUserRequest), args[2].(bool))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(n int, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, request models.CreateUserRequest, admin bool) (int, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUser(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, id int)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(err error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx
func (_e *MockUserService_Expecter) GetAllUsers(ctx interface{}) *MockUserService_GetAllUsers_Call {
	return &MockUserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockUserService_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockUserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) Return(users []models.User, err error) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context) ([]models.User, error)) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(user *models.User, err error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*models.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserById(ctx context.Context, id int) (*models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserService_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetUserById(ctx interface{}, id interface{}) *MockUserService_GetUserById_Call {
	return &MockUserService_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockUserService_GetUserById_Call) Run(run func(ctx context.Context, id int)) *MockUserService_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_GetUserById_Call) Return(user *models.User, err error) *MockUserService_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.User, error)) *MockUserService_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserBlocked provides a mock function for the type MockUserService
func (_mock *MockUserService) IsUserBlocked(ctx context.Context, id int) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsUserBlocked")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_IsUserBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserBlocked'
type MockUserService_IsUserBlocked_Call struct {
	*mock.Call
}

// IsUserBlocked is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) IsUserBlocked(ctx interface{}, id interface{}) *MockUserService_IsUserBlocked_Call {
	return &MockUserService_IsUserBlocked_Call{Call: _e.mock.On("IsUserBlocked", ctx, id)}
}

func (_c *MockUserService_IsUserBlocked_Call) Run(run func(ctx context.Context, id int)) *MockUserService_IsUserBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_IsUserBlocked_Call) Return(b bool, err error) *MockUserService_IsUserBlocked_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserService_IsUserBlocked_Call) RunAndReturn(run func(ctx context.Context, id int) (bool, error)) *MockUserService_IsUserBlocked_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyLocation provides a mock function for the type MockUserService
func (_mock *MockUserService) ModifyLocation(ctx context.Context, id int, newLocation string) error {
	ret := _mock.Called(ctx, id, newLocation)

	if len(ret) == 0 {
		panic("no return value specified for ModifyLocation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, id, newLocation)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_ModifyLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyLocation'
type MockUserService_ModifyLocation_Call struct {
	*mock.Call
}

// ModifyLocation is a helper method to define mock.On call
//   - ctx
//   - id
//   - newLocation
func (_e *MockUserService_Expecter) ModifyLocation(ctx interface{}, id interface{}, newLocation interface{}) *MockUserService_ModifyLocation_Call {
	return &MockUserService_ModifyLocation_Call{Call: _e.mock.On("ModifyLocation", ctx, id, newLocation)}
}

func (_c *MockUserService_ModifyLocation_Call) Run(run func(ctx context.Context, id int, newLocation string)) *MockUserService_ModifyLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_ModifyLocation_Call) Return(err error) *MockUserService_ModifyLocation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_ModifyLocation_Call) RunAndReturn(run func(ctx context.Context, id int, newLocation string) error) *MockUserService_ModifyLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyUser provides a mock function for the type MockUserService
func (_mock *MockUserService) ModifyUser(ctx context.Context, user *models.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ModifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_ModifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyUser'
type MockUserService_ModifyUser_Call struct {
	*mock.Call
}

// ModifyUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserService_Expecter) ModifyUser(ctx interface{}, user interface{}) *MockUserService_ModifyUser_Call {
	return &MockUserService_ModifyUser_Call{Call: _e.mock.On("ModifyUser", ctx, user)}
}

func (_c *MockUserService_ModifyUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockUserService_ModifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockUserService_ModifyUser_Call) Return(err error) *MockUserService_ModifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_ModifyUser_Call) RunAndReturn(run func(ctx context.Context, user *models.User) error) *MockUserService_ModifyUser_Call {
	_c.Call.Return(run)
	return _c
}
