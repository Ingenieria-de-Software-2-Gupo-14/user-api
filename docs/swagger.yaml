definitions:
  models.AuditData:
    properties:
      id:
        type: integer
      modificationDate:
        type: string
      natureOfModification:
        type: string
      ruleId:
        type: integer
      userId:
        type: integer
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 60
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
      role:
        enum:
        - student
        - teacher
        - admin
        type: string
      surname:
        maxLength: 60
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    - role
    - surname
    type: object
  models.EmailVerifiaction:
    properties:
      pin:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.NotificationPreference:
    properties:
      exam_notification:
        type: boolean
      homework_notification:
        type: boolean
      social_notification:
        type: boolean
    required:
    - exam_notification
    - homework_notification
    - social_notification
    type: object
  models.NotificationPreferenceRequest:
    properties:
      notification_preference:
        type: boolean
      notification_type:
        type: string
    required:
    - notification_preference
    - notification_type
    type: object
  models.NotificationSetUpRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  models.NotificationToken:
    properties:
      created_time:
        type: string
      notification_token:
        maxLength: 225
        minLength: 1
        type: string
    required:
    - notification_token
    type: object
  models.NotificationTokens:
    properties:
      notifications:
        items:
          $ref: '#/definitions/models.NotificationToken'
        type: array
    type: object
  models.NotifyRequest:
    properties:
      notification_text:
        maxLength: 225
        minLength: 1
        type: string
      notification_title:
        maxLength: 225
        minLength: 1
        type: string
      notification_type:
        type: string
      users:
        items:
          type: integer
        type: array
    required:
    - notification_text
    - notification_title
    - notification_type
    - users
    type: object
  models.PasswordModifyRequest:
    properties:
      password:
        maxLength: 60
        minLength: 8
        type: string
      token:
        maxLength: 6
        type: string
    required:
    - password
    - token
    type: object
  models.PasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Rule:
    properties:
      ApplicationCondition:
        type: string
      Description:
        type: string
      Title:
        type: string
      effectiveDate:
        type: string
      id:
        type: integer
    required:
    - ApplicationCondition
    - Description
    - Title
    type: object
  models.RuleModify:
    properties:
      ApplicationCondition:
        type: string
      Description:
        type: string
      Title:
        type: string
    type: object
  models.User:
    properties:
      blocked:
        description: No direct db tag, calculated with JOIN
        type: boolean
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      profile_photo:
        type: string
      role:
        type: string
      surname:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
  models.UserUpdateDto:
    properties:
      description:
        type: string
      location:
        type: string
      name:
        type: string
      profile_photo:
        type: string
      surname:
        type: string
    type: object
  utils.HTTPError:
    properties:
      code:
        type: integer
      error:
        type: string
      title:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User API
  version: "1.0"
paths:
  /auth/{provider}:
    get:
      consumes:
      - application/json
      description: Begin authentication with the specified provider
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Begin authentication
      tags:
      - Auth
  /auth/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Complete authentication with the specified provider
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Complete authentication
      tags:
      - Auth
  /auth/admins:
    post:
      consumes:
      - application/json
      description: Registers a new Admin
      parameters:
      - description: User Registration Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - text/plain
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Register a new Admin
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with email and password, returning user information
        and a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login returns user and token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format or input validation failed
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "403":
          description: User is blocked
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error (e.g., token generation failed)
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: User login
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout the user by clearing the cookie
      produces:
      - application/json
      responses:
        "307":
          description: Redirected to home page
          schema:
            type: string
      summary: Logout
      tags:
      - Auth
  /auth/users:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User Registration Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - text/plain
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Register a new user
      tags:
      - Auth
  /auth/users/verify:
    post:
      consumes:
      - application/json
      description: Verify the new user's registration using a Pin sent to the users
        email
      parameters:
      - description: Email Verification Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EmailVerifiaction'
      produces:
      - text/plain
      responses:
        "201":
          description: User Verified and created successfully
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Verify a new user's registration
      tags:
      - Auth
  /auth/users/verify/resend:
    put:
      consumes:
      - application/json
      description: Sends a new Verification Pin to email saved in verification cookie
      parameters:
      - description: Email
        in: query
        name: email
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: New Pin sent successfully
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Sends a new Verification
      tags:
      - Auth
  /rules:
    get:
      consumes:
      - application/json
      description: Returns a list of all rules in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of rules
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Rule'
              type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all rules
      tags:
      - Rules
    post:
      consumes:
      - application/json
      description: Create a new rule
      parameters:
      - description: Rule creation Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Rule'
      produces:
      - text/plain
      responses:
        "201":
          description: Rule created correctly
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Create a new rule
      tags:
      - Rules
  /rules/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a user from the database
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Rule successfully deleted
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete user by ID
      tags:
      - Rules
    put:
      consumes:
      - application/json
      description: Updates the contents of a rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Elements to modify
        in: body
        name: modifications
        required: true
        schema:
          $ref: '#/definitions/models.RuleModify'
      responses:
        "200":
          description: rule updated successfully
        "400":
          description: Invalid user ID format or request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Modify rule password
      tags:
      - Rules
  /rules/audit:
    get:
      consumes:
      - application/json
      description: Returns a list of all audits in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of audits
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.AuditData'
              type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all audits
      tags:
      - Rules
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.User'
              type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get all users
      tags:
      - Users
  /users/:id/notifications/preference:
    get:
      consumes:
      - application/json
      description: Modify the preference of a notification type between exam_notification
        homework_notification or social_notification
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: preferences
          schema:
            $ref: '#/definitions/models.NotificationPreference'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Modify the preference of a notification type
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Modify the preference of a notification type between exam_notification
        homework_notification or social_notification
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: NotificationPreferenceRequest payload
        in: body
        name: NotificationPreferenceRequest
        required: true
        schema:
          $ref: '#/definitions/models.NotificationPreferenceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: preference changed successfully
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Modify the preference of a notification type
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a user from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User successfully deleted
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Delete user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Returns a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            additionalProperties:
              $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateDto'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user data
          schema:
            additionalProperties:
              $ref: '#/definitions/models.UserUpdateDto'
            type: object
        "400":
          description: Invalid user ID format or request format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Modify user
      tags:
      - Users
  /users/{id}/notifications:
    get:
      consumes:
      - application/json
      description: Send a notification to users sent in body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users notified successfully
          schema:
            $ref: '#/definitions/models.NotificationTokens'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Send a notification to users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Set a notification token to users in order to be able to send push
        notifications
      parameters:
      - description: NotificationSetUpRequest payload
        in: body
        name: NotificationToken
        required: true
        schema:
          $ref: '#/definitions/models.NotificationSetUpRequest'
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Token Setup successful
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Set a notification token to users
      tags:
      - Users
  /users/block/{id}:
    put:
      consumes:
      - application/json
      description: Blocks a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: User blocked successfully
          schema:
            type: string
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Block user
      tags:
      - Users
  /users/notify:
    post:
      consumes:
      - application/json
      description: Send a notification to users sent in body
      parameters:
      - description: NotificationToken payload
        in: body
        name: NotificationToken
        required: true
        schema:
          $ref: '#/definitions/models.NotifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users notified successfully
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Send a notification to users
      tags:
      - Users
  /users/password:
    put:
      consumes:
      - application/json
      description: Updates the password of a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User with updated password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.PasswordModifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Pasword updated successfully
        "400":
          description: Invalid user ID format or request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Modify user password
      tags:
      - Users
  /users/reset/password:
    post:
      consumes:
      - application/json
      description: Start the process to reset password, sends and email with a link
        to make a new password
      parameters:
      - description: PasswordResetRequest payload
        in: body
        name: PasswordResetRequest
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Link sent successfully
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Start the process to reset password
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
