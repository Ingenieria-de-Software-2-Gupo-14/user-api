// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"
	"time"

	"github.com/Ingenieria-de-Software-2-Gupo-14/user-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLoginAttemptService creates a new instance of MockLoginAttemptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAttemptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAttemptService {
	mock := &MockLoginAttemptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoginAttemptService is an autogenerated mock type for the LoginAttemptService type
type MockLoginAttemptService struct {
	mock.Mock
}

type MockLoginAttemptService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAttemptService) EXPECT() *MockLoginAttemptService_Expecter {
	return &MockLoginAttemptService_Expecter{mock: &_m.Mock}
}

// AddLoginAttempt provides a mock function for the type MockLoginAttemptService
func (_mock *MockLoginAttemptService) AddLoginAttempt(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error {
	ret := _mock.Called(ctx, userID, ipAddress, userAgent, successful)

	if len(ret) == 0 {
		panic("no return value specified for AddLoginAttempt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, string, bool) error); ok {
		r0 = returnFunc(ctx, userID, ipAddress, userAgent, successful)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoginAttemptService_AddLoginAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLoginAttempt'
type MockLoginAttemptService_AddLoginAttempt_Call struct {
	*mock.Call
}

// AddLoginAttempt is a helper method to define mock.On call
//   - ctx
//   - userID
//   - ipAddress
//   - userAgent
//   - successful
func (_e *MockLoginAttemptService_Expecter) AddLoginAttempt(ctx interface{}, userID interface{}, ipAddress interface{}, userAgent interface{}, successful interface{}) *MockLoginAttemptService_AddLoginAttempt_Call {
	return &MockLoginAttemptService_AddLoginAttempt_Call{Call: _e.mock.On("AddLoginAttempt", ctx, userID, ipAddress, userAgent, successful)}
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) Run(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool)) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) Return(err error) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoginAttemptService_AddLoginAttempt_Call) RunAndReturn(run func(ctx context.Context, userID int, ipAddress string, userAgent string, successful bool) error) *MockLoginAttemptService_AddLoginAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginsByUserId provides a mock function for the type MockLoginAttemptService
func (_mock *MockLoginAttemptService) GetLoginsByUserId(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetLoginsByUserId")
	}

	var r0 []*models.LoginAttempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*models.LoginAttempt, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) []*models.LoginAttempt); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LoginAttempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoginAttemptService_GetLoginsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginsByUserId'
type MockLoginAttemptService_GetLoginsByUserId_Call struct {
	*mock.Call
}

// GetLoginsByUserId is a helper method to define mock.On call
//   - ctx
//   - userID
//   - limit
//   - offset
func (_e *MockLoginAttemptService_Expecter) GetLoginsByUserId(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockLoginAttemptService_GetLoginsByUserId_Call {
	return &MockLoginAttemptService_GetLoginsByUserId_Call{Call: _e.mock.On("GetLoginsByUserId", ctx, userID, limit, offset)}
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) Run(run func(ctx context.Context, userID int, limit int, offset int)) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) Return(loginAttempts []*models.LoginAttempt, err error) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Return(loginAttempts, err)
	return _c
}

func (_c *MockLoginAttemptService_GetLoginsByUserId_Call) RunAndReturn(run func(ctx context.Context, userID int, limit int, offset int) ([]*models.LoginAttempt, error)) *MockLoginAttemptService_GetLoginsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRulesService creates a new instance of MockRulesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRulesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRulesService {
	mock := &MockRulesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRulesService is an autogenerated mock type for the RulesService type
type MockRulesService struct {
	mock.Mock
}

type MockRulesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRulesService) EXPECT() *MockRulesService_Expecter {
	return &MockRulesService_Expecter{mock: &_m.Mock}
}

// CreateRule provides a mock function for the type MockRulesService
func (_mock *MockRulesService) CreateRule(ctx context.Context, rule models.Rule, userId int) error {
	ret := _mock.Called(ctx, rule, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Rule, int) error); ok {
		r0 = returnFunc(ctx, rule, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRulesService_CreateRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRule'
type MockRulesService_CreateRule_Call struct {
	*mock.Call
}

// CreateRule is a helper method to define mock.On call
//   - ctx
//   - rule
//   - userId
func (_e *MockRulesService_Expecter) CreateRule(ctx interface{}, rule interface{}, userId interface{}) *MockRulesService_CreateRule_Call {
	return &MockRulesService_CreateRule_Call{Call: _e.mock.On("CreateRule", ctx, rule, userId)}
}

func (_c *MockRulesService_CreateRule_Call) Run(run func(ctx context.Context, rule models.Rule, userId int)) *MockRulesService_CreateRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Rule), args[2].(int))
	})
	return _c
}

func (_c *MockRulesService_CreateRule_Call) Return(err error) *MockRulesService_CreateRule_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRulesService_CreateRule_Call) RunAndReturn(run func(ctx context.Context, rule models.Rule, userId int) error) *MockRulesService_CreateRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRule provides a mock function for the type MockRulesService
func (_mock *MockRulesService) DeleteRule(ctx context.Context, ruleId int, userId int) error {
	ret := _mock.Called(ctx, ruleId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = returnFunc(ctx, ruleId, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRulesService_DeleteRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRule'
type MockRulesService_DeleteRule_Call struct {
	*mock.Call
}

// DeleteRule is a helper method to define mock.On call
//   - ctx
//   - ruleId
//   - userId
func (_e *MockRulesService_Expecter) DeleteRule(ctx interface{}, ruleId interface{}, userId interface{}) *MockRulesService_DeleteRule_Call {
	return &MockRulesService_DeleteRule_Call{Call: _e.mock.On("DeleteRule", ctx, ruleId, userId)}
}

func (_c *MockRulesService_DeleteRule_Call) Run(run func(ctx context.Context, ruleId int, userId int)) *MockRulesService_DeleteRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockRulesService_DeleteRule_Call) Return(err error) *MockRulesService_DeleteRule_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRulesService_DeleteRule_Call) RunAndReturn(run func(ctx context.Context, ruleId int, userId int) error) *MockRulesService_DeleteRule_Call {
	_c.Call.Return(run)
	return _c
}

// GetAudits provides a mock function for the type MockRulesService
func (_mock *MockRulesService) GetAudits(ctx context.Context) ([]models.Audit, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAudits")
	}

	var r0 []models.Audit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Audit, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Audit); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Audit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesService_GetAudits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAudits'
type MockRulesService_GetAudits_Call struct {
	*mock.Call
}

// GetAudits is a helper method to define mock.On call
//   - ctx
func (_e *MockRulesService_Expecter) GetAudits(ctx interface{}) *MockRulesService_GetAudits_Call {
	return &MockRulesService_GetAudits_Call{Call: _e.mock.On("GetAudits", ctx)}
}

func (_c *MockRulesService_GetAudits_Call) Run(run func(ctx context.Context)) *MockRulesService_GetAudits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRulesService_GetAudits_Call) Return(audits []models.Audit, err error) *MockRulesService_GetAudits_Call {
	_c.Call.Return(audits, err)
	return _c
}

func (_c *MockRulesService_GetAudits_Call) RunAndReturn(run func(ctx context.Context) ([]models.Audit, error)) *MockRulesService_GetAudits_Call {
	_c.Call.Return(run)
	return _c
}

// GetRules provides a mock function for the type MockRulesService
func (_mock *MockRulesService) GetRules(ctx context.Context) ([]models.Rule, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRules")
	}

	var r0 []models.Rule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Rule, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Rule); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Rule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRulesService_GetRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRules'
type MockRulesService_GetRules_Call struct {
	*mock.Call
}

// GetRules is a helper method to define mock.On call
//   - ctx
func (_e *MockRulesService_Expecter) GetRules(ctx interface{}) *MockRulesService_GetRules_Call {
	return &MockRulesService_GetRules_Call{Call: _e.mock.On("GetRules", ctx)}
}

func (_c *MockRulesService_GetRules_Call) Run(run func(ctx context.Context)) *MockRulesService_GetRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRulesService_GetRules_Call) Return(rules []models.Rule, err error) *MockRulesService_GetRules_Call {
	_c.Call.Return(rules, err)
	return _c
}

func (_c *MockRulesService_GetRules_Call) RunAndReturn(run func(ctx context.Context) ([]models.Rule, error)) *MockRulesService_GetRules_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyRule provides a mock function for the type MockRulesService
func (_mock *MockRulesService) ModifyRule(ctx context.Context, ruleId int, modification models.RuleModify, userId int) error {
	ret := _mock.Called(ctx, ruleId, modification, userId)

	if len(ret) == 0 {
		panic("no return value specified for ModifyRule")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, models.RuleModify, int) error); ok {
		r0 = returnFunc(ctx, ruleId, modification, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRulesService_ModifyRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyRule'
type MockRulesService_ModifyRule_Call struct {
	*mock.Call
}

// ModifyRule is a helper method to define mock.On call
//   - ctx
//   - ruleId
//   - modification
//   - userId
func (_e *MockRulesService_Expecter) ModifyRule(ctx interface{}, ruleId interface{}, modification interface{}, userId interface{}) *MockRulesService_ModifyRule_Call {
	return &MockRulesService_ModifyRule_Call{Call: _e.mock.On("ModifyRule", ctx, ruleId, modification, userId)}
}

func (_c *MockRulesService_ModifyRule_Call) Run(run func(ctx context.Context, ruleId int, modification models.RuleModify, userId int)) *MockRulesService_ModifyRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(models.RuleModify), args[3].(int))
	})
	return _c
}

func (_c *MockRulesService_ModifyRule_Call) Return(err error) *MockRulesService_ModifyRule_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRulesService_ModifyRule_Call) RunAndReturn(run func(ctx context.Context, ruleId int, modification models.RuleModify, userId int) error) *MockRulesService_ModifyRule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// AddNotification provides a mock function for the type MockUserService
func (_mock *MockUserService) AddNotification(ctx context.Context, id int, text string) error {
	ret := _mock.Called(ctx, id, text)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, id, text)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_AddNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNotification'
type MockUserService_AddNotification_Call struct {
	*mock.Call
}

// AddNotification is a helper method to define mock.On call
//   - ctx
//   - id
//   - text
func (_e *MockUserService_Expecter) AddNotification(ctx interface{}, id interface{}, text interface{}) *MockUserService_AddNotification_Call {
	return &MockUserService_AddNotification_Call{Call: _e.mock.On("AddNotification", ctx, id, text)}
}

func (_c *MockUserService_AddNotification_Call) Run(run func(ctx context.Context, id int, text string)) *MockUserService_AddNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_AddNotification_Call) Return(err error) *MockUserService_AddNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_AddNotification_Call) RunAndReturn(run func(ctx context.Context, id int, text string) error) *MockUserService_AddNotification_Call {
	_c.Call.Return(run)
	return _c
}

// BlockUser provides a mock function for the type MockUserService
func (_mock *MockUserService) BlockUser(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time) error {
	ret := _mock.Called(ctx, id, reason, blockerId, blockedUntil)

	if len(ret) == 0 {
		panic("no return value specified for BlockUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, *int, *time.Time) error); ok {
		r0 = returnFunc(ctx, id, reason, blockerId, blockedUntil)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_BlockUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockUser'
type MockUserService_BlockUser_Call struct {
	*mock.Call
}

// BlockUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - reason
//   - blockerId
//   - blockedUntil
func (_e *MockUserService_Expecter) BlockUser(ctx interface{}, id interface{}, reason interface{}, blockerId interface{}, blockedUntil interface{}) *MockUserService_BlockUser_Call {
	return &MockUserService_BlockUser_Call{Call: _e.mock.On("BlockUser", ctx, id, reason, blockerId, blockedUntil)}
}

func (_c *MockUserService_BlockUser_Call) Run(run func(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time)) *MockUserService_BlockUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*int), args[4].(*time.Time))
	})
	return _c
}

func (_c *MockUserService_BlockUser_Call) Return(err error) *MockUserService_BlockUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_BlockUser_Call) RunAndReturn(run func(ctx context.Context, id int, reason string, blockerId *int, blockedUntil *time.Time) error) *MockUserService_BlockUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(ctx context.Context, request models.CreateUserRequest) (int, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateUserRequest) (int, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.CreateUserRequest) int); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.CreateUserRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, request interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, request)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, request models.CreateUserRequest)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CreateUserRequest))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(n int, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, request models.CreateUserRequest) (int, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUser(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, id int)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(err error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx
func (_e *MockUserService_Expecter) GetAllUsers(ctx interface{}) *MockUserService_GetAllUsers_Call {
	return &MockUserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockUserService_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockUserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) Return(users []models.User, err error) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) RunAndReturn(run func(ctx context.Context) ([]models.User, error)) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(user *models.User, err error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*models.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserById(ctx context.Context, id int) (*models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserService_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetUserById(ctx interface{}, id interface{}) *MockUserService_GetUserById_Call {
	return &MockUserService_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockUserService_GetUserById_Call) Run(run func(ctx context.Context, id int)) *MockUserService_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_GetUserById_Call) Return(user *models.User, err error) *MockUserService_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.User, error)) *MockUserService_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNotifications provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserNotifications(ctx context.Context, id int) (models.Notifications, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotifications")
	}

	var r0 models.Notifications
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (models.Notifications, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) models.Notifications); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Notifications)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNotifications'
type MockUserService_GetUserNotifications_Call struct {
	*mock.Call
}

// GetUserNotifications is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetUserNotifications(ctx interface{}, id interface{}) *MockUserService_GetUserNotifications_Call {
	return &MockUserService_GetUserNotifications_Call{Call: _e.mock.On("GetUserNotifications", ctx, id)}
}

func (_c *MockUserService_GetUserNotifications_Call) Run(run func(ctx context.Context, id int)) *MockUserService_GetUserNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_GetUserNotifications_Call) Return(notifications models.Notifications, err error) *MockUserService_GetUserNotifications_Call {
	_c.Call.Return(notifications, err)
	return _c
}

func (_c *MockUserService_GetUserNotifications_Call) RunAndReturn(run func(ctx context.Context, id int) (models.Notifications, error)) *MockUserService_GetUserNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserBlocked provides a mock function for the type MockUserService
func (_mock *MockUserService) IsUserBlocked(ctx context.Context, id int) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsUserBlocked")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_IsUserBlocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserBlocked'
type MockUserService_IsUserBlocked_Call struct {
	*mock.Call
}

// IsUserBlocked is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) IsUserBlocked(ctx interface{}, id interface{}) *MockUserService_IsUserBlocked_Call {
	return &MockUserService_IsUserBlocked_Call{Call: _e.mock.On("IsUserBlocked", ctx, id)}
}

func (_c *MockUserService_IsUserBlocked_Call) Run(run func(ctx context.Context, id int)) *MockUserService_IsUserBlocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_IsUserBlocked_Call) Return(b bool, err error) *MockUserService_IsUserBlocked_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserService_IsUserBlocked_Call) RunAndReturn(run func(ctx context.Context, id int) (bool, error)) *MockUserService_IsUserBlocked_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyPassword provides a mock function for the type MockUserService
func (_mock *MockUserService) ModifyPassword(ctx context.Context, id int, password string) error {
	ret := _mock.Called(ctx, id, password)

	if len(ret) == 0 {
		panic("no return value specified for ModifyPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, id, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_ModifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyPassword'
type MockUserService_ModifyPassword_Call struct {
	*mock.Call
}

// ModifyPassword is a helper method to define mock.On call
//   - ctx
//   - id
//   - password
func (_e *MockUserService_Expecter) ModifyPassword(ctx interface{}, id interface{}, password interface{}) *MockUserService_ModifyPassword_Call {
	return &MockUserService_ModifyPassword_Call{Call: _e.mock.On("ModifyPassword", ctx, id, password)}
}

func (_c *MockUserService_ModifyPassword_Call) Run(run func(ctx context.Context, id int, password string)) *MockUserService_ModifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_ModifyPassword_Call) Return(err error) *MockUserService_ModifyPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_ModifyPassword_Call) RunAndReturn(run func(ctx context.Context, id int, password string) error) *MockUserService_ModifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyUser provides a mock function for the type MockUserService
func (_mock *MockUserService) ModifyUser(ctx context.Context, id int, user models.UserUpdateDto) error {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for ModifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, models.UserUpdateDto) error); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_ModifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyUser'
type MockUserService_ModifyUser_Call struct {
	*mock.Call
}

// ModifyUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - user
func (_e *MockUserService_Expecter) ModifyUser(ctx interface{}, id interface{}, user interface{}) *MockUserService_ModifyUser_Call {
	return &MockUserService_ModifyUser_Call{Call: _e.mock.On("ModifyUser", ctx, id, user)}
}

func (_c *MockUserService_ModifyUser_Call) Run(run func(ctx context.Context, id int, user models.UserUpdateDto)) *MockUserService_ModifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(models.UserUpdateDto))
	})
	return _c
}

func (_c *MockUserService_ModifyUser_Call) Return(err error) *MockUserService_ModifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_ModifyUser_Call) RunAndReturn(run func(ctx context.Context, id int, user models.UserUpdateDto) error) *MockUserService_ModifyUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockUserService
func (_mock *MockUserService) VerifyUser(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockUserService_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) VerifyUser(ctx interface{}, id interface{}) *MockUserService_VerifyUser_Call {
	return &MockUserService_VerifyUser_Call{Call: _e.mock.On("VerifyUser", ctx, id)}
}

func (_c *MockUserService_VerifyUser_Call) Run(run func(ctx context.Context, id int)) *MockUserService_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockUserService_VerifyUser_Call) Return(err error) *MockUserService_VerifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_VerifyUser_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockUserService_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationService creates a new instance of MockVerificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationService {
	mock := &MockVerificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerificationService is an autogenerated mock type for the VerificationService type
type MockVerificationService struct {
	mock.Mock
}

type MockVerificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationService) EXPECT() *MockVerificationService_Expecter {
	return &MockVerificationService_Expecter{mock: &_m.Mock}
}

// DeleteByUserId provides a mock function for the type MockVerificationService
func (_mock *MockVerificationService) DeleteByUserId(ctx context.Context, userId int) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationService_DeleteByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserId'
type MockVerificationService_DeleteByUserId_Call struct {
	*mock.Call
}

// DeleteByUserId is a helper method to define mock.On call
//   - ctx
//   - userId
func (_e *MockVerificationService_Expecter) DeleteByUserId(ctx interface{}, userId interface{}) *MockVerificationService_DeleteByUserId_Call {
	return &MockVerificationService_DeleteByUserId_Call{Call: _e.mock.On("DeleteByUserId", ctx, userId)}
}

func (_c *MockVerificationService_DeleteByUserId_Call) Run(run func(ctx context.Context, userId int)) *MockVerificationService_DeleteByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockVerificationService_DeleteByUserId_Call) Return(err error) *MockVerificationService_DeleteByUserId_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationService_DeleteByUserId_Call) RunAndReturn(run func(ctx context.Context, userId int) error) *MockVerificationService_DeleteByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerification provides a mock function for the type MockVerificationService
func (_mock *MockVerificationService) GetVerification(ctx context.Context, id int) (*models.UserVerification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVerification")
	}

	var r0 *models.UserVerification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.UserVerification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.UserVerification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserVerification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVerificationService_GetVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerification'
type MockVerificationService_GetVerification_Call struct {
	*mock.Call
}

// GetVerification is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockVerificationService_Expecter) GetVerification(ctx interface{}, id interface{}) *MockVerificationService_GetVerification_Call {
	return &MockVerificationService_GetVerification_Call{Call: _e.mock.On("GetVerification", ctx, id)}
}

func (_c *MockVerificationService_GetVerification_Call) Run(run func(ctx context.Context, id int)) *MockVerificationService_GetVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockVerificationService_GetVerification_Call) Return(userVerification *models.UserVerification, err error) *MockVerificationService_GetVerification_Call {
	_c.Call.Return(userVerification, err)
	return _c
}

func (_c *MockVerificationService_GetVerification_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.UserVerification, error)) *MockVerificationService_GetVerification_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationEmail provides a mock function for the type MockVerificationService
func (_mock *MockVerificationService) SendVerificationEmail(ctx context.Context, userId int, email string) error {
	ret := _mock.Called(ctx, userId, email)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, userId, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationService_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type MockVerificationService_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - ctx
//   - userId
//   - email
func (_e *MockVerificationService_Expecter) SendVerificationEmail(ctx interface{}, userId interface{}, email interface{}) *MockVerificationService_SendVerificationEmail_Call {
	return &MockVerificationService_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", ctx, userId, email)}
}

func (_c *MockVerificationService_SendVerificationEmail_Call) Run(run func(ctx context.Context, userId int, email string)) *MockVerificationService_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockVerificationService_SendVerificationEmail_Call) Return(err error) *MockVerificationService_SendVerificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationService_SendVerificationEmail_Call) RunAndReturn(run func(ctx context.Context, userId int, email string) error) *MockVerificationService_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePin provides a mock function for the type MockVerificationService
func (_mock *MockVerificationService) UpdatePin(ctx context.Context, userId int, email string) error {
	ret := _mock.Called(ctx, userId, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePin")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, userId, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationService_UpdatePin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePin'
type MockVerificationService_UpdatePin_Call struct {
	*mock.Call
}

// UpdatePin is a helper method to define mock.On call
//   - ctx
//   - userId
//   - email
func (_e *MockVerificationService_Expecter) UpdatePin(ctx interface{}, userId interface{}, email interface{}) *MockVerificationService_UpdatePin_Call {
	return &MockVerificationService_UpdatePin_Call{Call: _e.mock.On("UpdatePin", ctx, userId, email)}
}

func (_c *MockVerificationService_UpdatePin_Call) Run(run func(ctx context.Context, userId int, email string)) *MockVerificationService_UpdatePin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockVerificationService_UpdatePin_Call) Return(err error) *MockVerificationService_UpdatePin_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationService_UpdatePin_Call) RunAndReturn(run func(ctx context.Context, userId int, email string) error) *MockVerificationService_UpdatePin_Call {
	_c.Call.Return(run)
	return _c
}
